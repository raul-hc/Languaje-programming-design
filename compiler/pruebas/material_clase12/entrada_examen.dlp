'''
	Programa de prueba
	DLP 15/16
'''

# Variables globales
pair as struct { 
  integer as int;
  character as char;
};

acme as struct {
  employees as struct { age as int; } [2];
}[2];

fibonacci as int[8][3];

# Procedimiento
def p() {}

# Funciones 
def f(r as double, e as int) as int{
  real as double;
  c as char;
  result as int;
  real = r * 10.0;
  c = '0';
  if (e < 256) {
    c = e cast char;
    result = c cast int;
  }
  else {
    result = real cast int;
  }
  return result;
}

def initialize() {
  i as int;
  fibonacci[0][0] = 0;
  fibonacci[0][1] = 1;
  fibonacci[0][2] = 1;
  i = 1;
  while(i < 8) {
    fibonacci[i][0] = fibonacci[i - 1][1];
    fibonacci[i][1] = fibonacci[i - 1][2];
    fibonacci[i][2] = fibonacci[i][0] + fibonacci[i][1];
    i = i + 1;
  }
}

# Programa principal
def main(){
  i, j as int;
  p();
  i = 0;
  pair.character = '0';
  pair.integer = '0' cast int;

  # Muestra 48 (valor decimal de '0')
  print f(i cast double, pair.character cast int), '\n';
  f(1.3, 2); 

  initialize(); 
  i = 0;
  while(i < 8) {
    # Muestra la secuencia de Fibonacci, desde el 1 hasta el 8 (34)
    print '(', i + 1, ')', fibonacci[i][0], 
          '+', fibonacci[i][1] , '=' ,
          fibonacci[i][2] , '\n';
    i = i + 1;
  }

  acme[1].employees[1].age = 56;
  # Muestra 56
  print acme[1].employees[1].age, '\n';
  i = 0;
  while (i<2) {
    j = 0;
    while (j<2) {
      acme[i].employees[j].age = i + j;
      j = j+ 1;
    }
    i = i + 1;
  }

  i = 0;
  while (i<2) {
    j = 0;
    while (j<2) {
      # Muestra 0 1 1 2
      print acme[i].employees[j].age, ' ';
      j = j + 1;
    }
    i = i + 1;
  }
}